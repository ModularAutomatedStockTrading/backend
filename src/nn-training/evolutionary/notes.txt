class ModelTrainer{

    training_data

    info_om_model

    neuralNetworks[]

    constructor(training_data, info_om_model)
        // call generateRandomGeneration()

    generateRandomGeneration()
        // fills neuralNetworks with instances
    
    evaluateInstance(NeuralNetwork nn, startIdx, endIdx)
        // take one NN and return heuristic (how good was it)
        int cnt = 0;
        for datapoint in data:
            // datapoint {
                inputs : []
                outputs : []
            }
            output = nn.predict(datapoint.input)
            cnt += (output == datapoint.output)
        return cnt
        @return Number
    
    getBestInstanceFromGeneration(startIdx, endIdx)
        // evaluateInstance for all NN and find the best
        best  = null
        bestPerformance = -1
        for NN in neuralNetworks:
            int performance = evaluateInstance(NN)
            if(performance > bestPerformance){
                best =  NN
                bestPerformance = performance
            }
        return best
        @return NeuralNetwork

    generatedMutatedGeneration(NeuralNetwork best)
        // fills neuralNetworks with mutations of best

    train(metadata)
        metadata : {
            // mutation rate
            // # of generations
            // # instances per generation 
        }
        NeuralNetwork best 
        for i op til number of generations:
            best = getBestInstanceFromGeneration()
            generatedMutatedGeneration(best)
        return best
        // return best instance
}

class NeuralNetwork(){
    //magic
}